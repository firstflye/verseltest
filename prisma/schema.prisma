// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           Int       @id @default(autoincrement())
  username     String    @unique
  password     String
  name         String?
  bio          String?
  website      String?
  profileImage String?
  createdAt    DateTime  @default(now())
  
  // Relations
  posts        Post[]
  comments     Comment[]
  likes        Like[]
  followers    Follow[]  @relation("Followers")
  following    Follow[]  @relation("Following")
  stories      Story[]
  reels        Reel[]
}

// Post model
model Post {
  id          Int       @id @default(autoincrement())
  userId      Int
  imageUrl    String
  caption     String?
  location    String?
  createdAt   DateTime  @default(now())
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
}

// Comment model
model Comment {
  id          Int       @id @default(autoincrement())
  postId      Int
  userId      Int
  content     String
  createdAt   DateTime  @default(now())
  
  // Relations
  post        Post      @relation(fields: [postId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

// Like model
model Like {
  id          Int       @id @default(autoincrement())
  postId      Int
  userId      Int
  createdAt   DateTime  @default(now())
  
  // Relations
  post        Post      @relation(fields: [postId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  
  // Unique constraint to prevent multiple likes from same user
  @@unique([postId, userId])
}

// Follow model
model Follow {
  id          Int       @id @default(autoincrement())
  followerId  Int       // User who is following
  followingId Int       // User being followed
  createdAt   DateTime  @default(now())
  
  // Relations
  follower    User      @relation("Followers", fields: [followerId], references: [id])
  following   User      @relation("Following", fields: [followingId], references: [id])
  
  // Unique constraint to prevent duplicate follows
  @@unique([followerId, followingId])
}

// Story model (disappears after 24 hours)
model Story {
  id          Int       @id @default(autoincrement())
  userId      Int
  mediaUrl    String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime
  
  // Relations
  user        User      @relation(fields: [userId], references: [id])
}

// Reel model (short videos)
model Reel {
  id           Int       @id @default(autoincrement())
  userId       Int
  videoUrl     String
  thumbnailUrl String?
  caption      String?
  duration     Int?      // in seconds
  createdAt    DateTime  @default(now())
  
  // Relations
  user         User      @relation(fields: [userId], references: [id])
}